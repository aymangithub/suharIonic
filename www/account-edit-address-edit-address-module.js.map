{"version":3,"sources":["webpack:///./src/app/account/edit-address/edit-address.module.ts","webpack:///./src/app/account/edit-address/edit-address.page.html","webpack:///./src/app/account/edit-address/edit-address.page.scss","webpack:///./src/app/account/edit-address/edit-address.page.ts"],"names":[],"mappings":"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","file":"account-edit-address-edit-address-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { EditAddressPage } from './edit-address.page';\nimport { KeysPipeModule } from '../../pipes/pipe.module';\nimport { TranslateModule } from '@ngx-translate/core';\nconst routes: Routes = [\n  {\n    path: '',\n    component: EditAddressPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    TranslateModule,\n    FormsModule,\n    IonicModule,\n    KeysPipeModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [EditAddressPage]\n})\nexport class EditAddressPageModule {}\n","module.exports = \"<ion-header mode='ios'>\\n  <ion-toolbar color=\\\"{{settings.theme.header}}\\\">\\n  \\t<ion-buttons slot=\\\"start\\\">\\n      <ion-back-button defaultHref=\\\"/tabs/account/address\\\"></ion-back-button>\\n    </ion-buttons>\\n    <ion-title>{{\\\"Edit Address\\\" | translate}}</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content padding>\\n\\n\\n\\t<ion-list no-margin *ngIf=\\\"settings.customer?.billing\\\">\\n\\n  <ion-list-header>\\n    <ion-label>{{\\\"Billing Address\\\" | translate}}</ion-label>\\n  </ion-list-header>\\n\\n        <ion-item>\\n            <ion-label position=\\\"stacked\\\">{{\\\"First Name\\\" | translate}}</ion-label>\\n            <ion-input required type=\\\"text\\\" [(ngModel)]=\\\"settings.customer.billing.first_name\\\" name=\\\"firstname\\\"> </ion-input>\\n        </ion-item>\\n        <ion-item>\\n            <ion-label position=\\\"stacked\\\">{{\\\"Last Name\\\" | translate}}</ion-label>\\n            <ion-input required type=\\\"text\\\" [(ngModel)]=\\\"settings.customer.billing.last_name\\\" name=\\\"lastname\\\"> </ion-input>\\n        </ion-item>\\n        <ion-item>\\n            <ion-label position=\\\"stacked\\\">{{\\\"Phone\\\" | translate}}</ion-label>\\n            <ion-input required type=\\\"text\\\" [(ngModel)]=\\\"settings.customer.billing.phone\\\" name=\\\"telephone\\\"> </ion-input>\\n        </ion-item>\\n        <ion-item>\\n            <ion-label position=\\\"stacked\\\">{{\\\"Company\\\" | translate}}</ion-label>\\n            <ion-input required type=\\\"text\\\" [(ngModel)]=\\\"settings.customer.billing.company\\\" name=\\\"company\\\"> </ion-input>\\n        </ion-item>\\n        <ion-item>\\n            <ion-label position=\\\"stacked\\\">{{\\\"Street Address\\\" | translate}}</ion-label>\\n            <ion-input required type=\\\"text\\\" [(ngModel)]=\\\"settings.customer.billing.address_1\\\" name=\\\"address_1\\\"> </ion-input>\\n        </ion-item>\\n        <ion-item>\\n            <ion-label position=\\\"stacked\\\">{{\\\"Street Address\\\" | translate}} 2</ion-label>\\n            <ion-input required type=\\\"text\\\" [(ngModel)]=\\\"settings.customer.billing.address_2\\\" name=\\\"address_2\\\"> </ion-input>\\n        </ion-item>\\n        <ion-item>\\n            <ion-label position=\\\"stacked\\\">{{\\\"Email\\\" | translate}}</ion-label>\\n            <ion-input required type=\\\"email\\\" [(ngModel)]=\\\"settings.customer.billing.email\\\" name=\\\"email\\\"> </ion-input>\\n        </ion-item>\\n        <ion-item>\\n            <ion-label position=\\\"stacked\\\">{{\\\"City\\\" | translate}}</ion-label>\\n            <ion-input required type=\\\"text\\\" [(ngModel)]=\\\"settings.customer.billing.city\\\" name=\\\"city\\\"> </ion-input>\\n        </ion-item>\\n        \\n        <ion-item>\\n            <ion-label position=\\\"stacked\\\">{{\\\"Postcode\\\" | translate}}</ion-label>\\n            <ion-input required type=\\\"number\\\" [(ngModel)]=\\\"settings.customer.billing.postcode\\\" name=\\\"postcode\\\"> </ion-input>\\n        </ion-item>\\n\\n\\n        <ion-item *ngIf=\\\"countries?.options\\\">\\n            <ion-label>{{\\\"Country\\\" | translate}}</ion-label>\\n            <ion-select [(ngModel)]=\\\"settings.customer.billing.country\\\" (ngModelChange)=\\\"getBillingRegion()\\\" name=\\\"billing.country\\\">\\n                <div *ngFor=\\\"let field of countries.options | keys\\\">\\n                    <ion-select-option value=\\\"{{field.key}}\\\"><span [innerHTML]=\\\"field.value\\\"></span> </ion-select-option>\\n                </div>\\n            </ion-select>\\n        </ion-item>\\n\\n        <div *ngIf=\\\"states && settings.customer.billing.country\\\">\\n        <ion-item *ngIf=\\\"billingStates\\\">\\n            <ion-label>{{\\\"State\\\" |translate}}</ion-label>\\n            <ion-select [(ngModel)]=\\\"settings.customer.billing.state\\\" name=\\\"billing_state\\\">\\n                <div *ngFor=\\\"let field of billingStates | keys\\\">\\n                    <ion-select-option value=\\\"{{field.key}}\\\">{{field.value}}</ion-select-option>\\n                </div>\\n            </ion-select>\\n        </ion-item>\\n        \\n\\n        <ion-item *ngIf=\\\"!billingStates\\\">\\n            <ion-label position=\\\"stacked\\\">{{\\\"State\\\" | translate}}</ion-label>\\n            <ion-input required type=\\\"text\\\" [(ngModel)]=\\\"settings.customer.billing.state\\\" name=\\\"billing_state\\\"> </ion-input>\\n        </ion-item>\\n        </div>\\n\\n\\n</ion-list>\\n\\n\\n<ion-list no-margin *ngIf=\\\"settings.customer?.shipping\\\">\\n\\n  <ion-list-header>\\n    <ion-label>{{\\\"Shipping Address\\\" | translate}}</ion-label>\\n  </ion-list-header>\\n\\n        <ion-item>\\n            <ion-label position=\\\"stacked\\\">{{\\\"First Name\\\" | translate}}</ion-label>\\n            <ion-input required type=\\\"text\\\" [(ngModel)]=\\\"settings.customer.shipping.first_name\\\" name=\\\"firstname\\\"> </ion-input>\\n        </ion-item>\\n        <ion-item>\\n            <ion-label position=\\\"stacked\\\">{{\\\"Last Name\\\" | translate}}</ion-label>\\n            <ion-input required type=\\\"text\\\" [(ngModel)]=\\\"settings.customer.shipping.last_name\\\" name=\\\"lastname\\\"> </ion-input>\\n        </ion-item>\\n        <ion-item>\\n            <ion-label position=\\\"stacked\\\">{{\\\"Company\\\" | translate}}</ion-label>\\n            <ion-input required type=\\\"text\\\" [(ngModel)]=\\\"settings.customer.shipping.company\\\" name=\\\"company\\\"> </ion-input>\\n        </ion-item>\\n        <ion-item>\\n            <ion-label position=\\\"stacked\\\">{{\\\"Street Address\\\" | translate}}</ion-label>\\n            <ion-input required type=\\\"text\\\" [(ngModel)]=\\\"settings.customer.shipping.address_1\\\" name=\\\"address_1\\\"> </ion-input>\\n        </ion-item>\\n        <ion-item>\\n            <ion-label position=\\\"stacked\\\">{{\\\"Street Address\\\" | translate}} 2</ion-label>\\n            <ion-input required type=\\\"text\\\" [(ngModel)]=\\\"settings.customer.shipping.address_2\\\" name=\\\"address_2\\\"> </ion-input>\\n        </ion-item>\\n        <ion-item>\\n            <ion-label position=\\\"stacked\\\">{{\\\"City\\\" | translate}}</ion-label>\\n            <ion-input required type=\\\"text\\\" [(ngModel)]=\\\"settings.customer.shipping.city\\\" name=\\\"city\\\"> </ion-input>\\n        </ion-item>\\n        \\n        <ion-item>\\n            <ion-label position=\\\"stacked\\\">{{\\\"Postcode\\\" | translate}}</ion-label>\\n            <ion-input required type=\\\"number\\\" [(ngModel)]=\\\"settings.customer.shipping.postcode\\\" name=\\\"postcode\\\"> </ion-input>\\n        </ion-item>\\n\\n\\n\\t\\t<ion-item *ngIf=\\\"countries?.options\\\">\\n            <ion-label>{{\\\"Country\\\" | translate}}</ion-label>\\n            <ion-select [(ngModel)]=\\\"settings.customer.shipping.country\\\" (ngModelChange)=\\\"getShippingRegion()\\\" name=\\\"shipping.country\\\">\\n                <div *ngFor=\\\"let field of countries?.options | keys\\\">\\n                    <ion-select-option value=\\\"{{field.key}}\\\"><span [innerHTML]=\\\"field.value\\\"></span> </ion-select-option>\\n                </div>\\n            </ion-select>\\n        </ion-item>\\n\\n        <div *ngIf=\\\"states && settings.customer.shipping.country\\\">\\n        <ion-item *ngIf=\\\"shippingStates\\\">\\n            <ion-label>{{\\\"State\\\" | translate}}</ion-label>\\n            <ion-select [(ngModel)]=\\\"settings.customer.shipping.state\\\" name=\\\"shipping_state\\\">\\n                <div *ngFor=\\\"let field of shippingStates | keys\\\">\\n                    <ion-select-option value=\\\"{{field.key}}\\\">{{field.value}}</ion-select-option>\\n                </div>\\n            </ion-select>\\n        </ion-item>\\n        \\n\\n        <ion-item *ngIf=\\\"!shippingStates\\\">\\n            <ion-label position=\\\"stacked\\\">{{\\\"State\\\" | translate}}</ion-label>\\n            <ion-input required type=\\\"text\\\" [(ngModel)]=\\\"settings.customer.shipping.state\\\" name=\\\"shipping_state\\\"> </ion-input>\\n        </ion-item>\\n        </div>\\n\\n\\n</ion-list>\\n\\n\\n<ion-button *ngIf=\\\"settings.customer\\\" color=\\\"{{settings.theme.button}}\\\" expand=\\\"block\\\" (click)=\\\"processAddress()\\\" [disabled]=\\\"disableButton\\\" fill=\\\"solid\\\">{{\\\"Save\\\" | translate}}</ion-button>\\n</ion-content>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FjY291bnQvZWRpdC1hZGRyZXNzL2VkaXQtYWRkcmVzcy5wYWdlLnNjc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { NavController } from '@ionic/angular';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ApiService } from '../../api.service';\nimport { Settings } from './../../data/settings';\n\n@Component({\n    selector: 'app-edit-address',\n    templateUrl: './edit-address.page.html',\n    styleUrls: ['./edit-address.page.scss'],\n})\nexport class EditAddressPage implements OnInit {\n    address: any = [];\n    countries: any;\n    states: any;\n    billingStates: any;\n    shippingStates: any;\n    status: any;\n    disableButton: boolean = false;\n    constructor(public api: ApiService, public settings: Settings, public router: Router, public navCtrl: NavController, public route: ActivatedRoute) {}\n    ngOnInit() {\n        this.getCountries();\n    }\n    async getCountries() {\n        await this.api.getItem('settings/general/woocommerce_specific_allowed_countries').subscribe(res => {\n            this.countries = res;\n            this.getStates();\n        }, err => {\n            console.log(err);\n        });\n    }\n    async getStates() {\n        await this.api.postItem('get-states').subscribe(res => {\n            this.states = res;\n            this.getBillingRegion();\n            this.getShippingRegion();\n        }, err => {\n            console.log(err);\n        });\n    }\n    processAddress() {\n        for (var key in this.settings.customer.billing) {\n            this.address['billing_' + key] = this.settings.customer.billing[key];\n        }\n        for (var key in this.settings.customer.shipping) {\n            this.address['shipping_' + key] = this.settings.customer.shipping[key];\n        }\n        this.updateAddress();\n    }\n    async updateAddress() {\n        this.disableButton = true;\n        await this.api.postItem('update-address', this.address).subscribe(res => {\n            this.status = res;\n           // this.navCtrl.pop();\n            this.disableButton = false;\n        }, err => {\n            this.disableButton = false;\n        });\n    }\n    getBillingRegion() {\n        if (this.states[this.settings.customer.billing.country] && 0 !== this.states[this.settings.customer.billing.country].length) this.billingStates = this.states[this.settings.customer.billing.country];\n        else this.billingStates = undefined;\n    }\n    getShippingRegion() {\n        if (this.states[this.settings.customer.shipping.country] && 0 !== this.states[this.settings.customer.shipping.country].length) this.shippingStates = this.states[this.settings.customer.shipping.country];\n        else this.shippingStates = undefined;\n    }\n}"],"sourceRoot":""}